Grammar

    0 $accept: input $end

    1 input: STRNAME KEY_END_ID STRNAME-list annot

    2 annot: '[' expr-or-null ']'
    3      | %empty

    4 expr-or-null: expr
    5             | %empty

    6 expr: '(' expr-no-pt ')'
    7     | expr-no-pt
    8     | name-no-pt

    9 expr-no-pt: expr-seq
   10           | expr-par
   11           | expr-fallback
   12           | expr-alt
   13           | expr-opt

   14 expr-seq: expr KEY_SEQ expr

   15 expr-par: expr KEY_PAR expr

   16 expr-fallback: KEY_FALLBACK '(' expr ',' expr ')'

   17 expr-alt: expr KEY_ALT expr

   18 expr-opt: KEY_OPT '(' expr ')'

   19 name-no-pt: STRNAME

   20 STRNAME-list: STRNAME-list STRNAME
   21             | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 6 16 18
    ')' (41) 6 16 18
    ',' (44) 16
    '[' (91) 2
    ']' (93) 2
    error (256)
    KEY_END_ID (258) 1
    KEY_SEQ <sval> (259) 14
    KEY_PAR <sval> (260) 15
    KEY_FALLBACK <sval> (261) 16
    KEY_OPT <sval> (262) 18
    KEY_ALT <sval> (263) 17
    STRNAME <sval> (264) 1 19 20


Nonterminals, with rules where they appear

    $accept (15)
        on left: 0
    input <annot> (16)
        on left: 1
        on right: 0
    annot <annot> (17)
        on left: 2 3
        on right: 1
    expr-or-null <annot> (18)
        on left: 4 5
        on right: 2
    expr <annot> (19)
        on left: 6 7 8
        on right: 4 14 15 16 17 18
    expr-no-pt <annot> (20)
        on left: 9 10 11 12 13
        on right: 6 7
    expr-seq <annot> (21)
        on left: 14
        on right: 9
    expr-par <annot> (22)
        on left: 15
        on right: 10
    expr-fallback <annot> (23)
        on left: 16
        on right: 11
    expr-alt <annot> (24)
        on left: 17
        on right: 12
    expr-opt <annot> (25)
        on left: 18
        on right: 13
    name-no-pt <annot> (26)
        on left: 19
        on right: 8
    STRNAME-list <vstring> (27)
        on left: 20 21
        on right: 1 20


State 0

    0 $accept: • input $end

    STRNAME  shift, and go to state 1

    input  go to state 2


State 1

    1 input: STRNAME • KEY_END_ID STRNAME-list annot

    KEY_END_ID  shift, and go to state 3


State 2

    0 $accept: input • $end

    $end  shift, and go to state 4


State 3

    1 input: STRNAME KEY_END_ID • STRNAME-list annot

    $default  reduce using rule 21 (STRNAME-list)

    STRNAME-list  go to state 5


State 4

    0 $accept: input $end •

    $default  accept


State 5

    1 input: STRNAME KEY_END_ID STRNAME-list • annot
   20 STRNAME-list: STRNAME-list • STRNAME

    STRNAME  shift, and go to state 6
    '['      shift, and go to state 7

    $default  reduce using rule 3 (annot)

    annot  go to state 8


State 6

   20 STRNAME-list: STRNAME-list STRNAME •

    $default  reduce using rule 20 (STRNAME-list)


State 7

    2 annot: '[' • expr-or-null ']'

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    $default  reduce using rule 5 (expr-or-null)

    expr-or-null   go to state 13
    expr           go to state 14
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 8

    1 input: STRNAME KEY_END_ID STRNAME-list annot •

    $default  reduce using rule 1 (input)


State 9

   16 expr-fallback: KEY_FALLBACK • '(' expr ',' expr ')'

    '('  shift, and go to state 22


State 10

   18 expr-opt: KEY_OPT • '(' expr ')'

    '('  shift, and go to state 23


State 11

   19 name-no-pt: STRNAME •

    $default  reduce using rule 19 (name-no-pt)


State 12

    6 expr: '(' • expr-no-pt ')'

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 24
    expr-no-pt     go to state 25
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 13

    2 annot: '[' expr-or-null • ']'

    ']'  shift, and go to state 26


State 14

    4 expr-or-null: expr •
   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   17 expr-alt: expr • KEY_ALT expr

    KEY_SEQ  shift, and go to state 27
    KEY_PAR  shift, and go to state 28
    KEY_ALT  shift, and go to state 29

    $default  reduce using rule 4 (expr-or-null)


State 15

    7 expr: expr-no-pt •

    $default  reduce using rule 7 (expr)


State 16

    9 expr-no-pt: expr-seq •

    $default  reduce using rule 9 (expr-no-pt)


State 17

   10 expr-no-pt: expr-par •

    $default  reduce using rule 10 (expr-no-pt)


State 18

   11 expr-no-pt: expr-fallback •

    $default  reduce using rule 11 (expr-no-pt)


State 19

   12 expr-no-pt: expr-alt •

    $default  reduce using rule 12 (expr-no-pt)


State 20

   13 expr-no-pt: expr-opt •

    $default  reduce using rule 13 (expr-no-pt)


State 21

    8 expr: name-no-pt •

    $default  reduce using rule 8 (expr)


State 22

   16 expr-fallback: KEY_FALLBACK '(' • expr ',' expr ')'

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 30
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 23

   18 expr-opt: KEY_OPT '(' • expr ')'

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 31
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 24

   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   17 expr-alt: expr • KEY_ALT expr

    KEY_SEQ  shift, and go to state 27
    KEY_PAR  shift, and go to state 28
    KEY_ALT  shift, and go to state 29


State 25

    6 expr: '(' expr-no-pt • ')'
    7     | expr-no-pt •

    ')'  shift, and go to state 32

    $default  reduce using rule 7 (expr)


State 26

    2 annot: '[' expr-or-null ']' •

    $default  reduce using rule 2 (annot)


State 27

   14 expr-seq: expr KEY_SEQ • expr

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 33
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 28

   15 expr-par: expr KEY_PAR • expr

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 34
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 29

   17 expr-alt: expr KEY_ALT • expr

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 35
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 30

   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   16 expr-fallback: KEY_FALLBACK '(' expr • ',' expr ')'
   17 expr-alt: expr • KEY_ALT expr

    KEY_SEQ  shift, and go to state 27
    KEY_PAR  shift, and go to state 28
    KEY_ALT  shift, and go to state 29
    ','      shift, and go to state 36


State 31

   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   17 expr-alt: expr • KEY_ALT expr
   18 expr-opt: KEY_OPT '(' expr • ')'

    KEY_SEQ  shift, and go to state 27
    KEY_PAR  shift, and go to state 28
    KEY_ALT  shift, and go to state 29
    ')'      shift, and go to state 37


State 32

    6 expr: '(' expr-no-pt ')' •

    $default  reduce using rule 6 (expr)


State 33

   14 expr-seq: expr • KEY_SEQ expr
   14         | expr KEY_SEQ expr •
   15 expr-par: expr • KEY_PAR expr
   17 expr-alt: expr • KEY_ALT expr

    KEY_PAR  shift, and go to state 28
    KEY_ALT  shift, and go to state 29

    $default  reduce using rule 14 (expr-seq)


State 34

   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   15         | expr KEY_PAR expr •
   17 expr-alt: expr • KEY_ALT expr

    KEY_ALT  shift, and go to state 29

    $default  reduce using rule 15 (expr-par)


State 35

   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   17 expr-alt: expr • KEY_ALT expr
   17         | expr KEY_ALT expr •

    $default  reduce using rule 17 (expr-alt)


State 36

   16 expr-fallback: KEY_FALLBACK '(' expr ',' • expr ')'

    KEY_FALLBACK  shift, and go to state 9
    KEY_OPT       shift, and go to state 10
    STRNAME       shift, and go to state 11
    '('           shift, and go to state 12

    expr           go to state 38
    expr-no-pt     go to state 15
    expr-seq       go to state 16
    expr-par       go to state 17
    expr-fallback  go to state 18
    expr-alt       go to state 19
    expr-opt       go to state 20
    name-no-pt     go to state 21


State 37

   18 expr-opt: KEY_OPT '(' expr ')' •

    $default  reduce using rule 18 (expr-opt)


State 38

   14 expr-seq: expr • KEY_SEQ expr
   15 expr-par: expr • KEY_PAR expr
   16 expr-fallback: KEY_FALLBACK '(' expr ',' expr • ')'
   17 expr-alt: expr • KEY_ALT expr

    KEY_SEQ  shift, and go to state 27
    KEY_PAR  shift, and go to state 28
    KEY_ALT  shift, and go to state 29
    ')'      shift, and go to state 39


State 39

   16 expr-fallback: KEY_FALLBACK '(' expr ',' expr ')' •

    $default  reduce using rule 16 (expr-fallback)
